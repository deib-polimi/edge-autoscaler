// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/lterrac/edge-autoscaler/pkg/apis/edgeautoscaler/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CommunityConfigurationLister helps list CommunityConfigurations.
// All objects returned here must be treated as read-only.
type CommunityConfigurationLister interface {
	// List lists all CommunityConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CommunityConfiguration, err error)
	// CommunityConfigurations returns an object that can list and get CommunityConfigurations.
	CommunityConfigurations(namespace string) CommunityConfigurationNamespaceLister
	CommunityConfigurationListerExpansion
}

// communityConfigurationLister implements the CommunityConfigurationLister interface.
type communityConfigurationLister struct {
	indexer cache.Indexer
}

// NewCommunityConfigurationLister returns a new CommunityConfigurationLister.
func NewCommunityConfigurationLister(indexer cache.Indexer) CommunityConfigurationLister {
	return &communityConfigurationLister{indexer: indexer}
}

// List lists all CommunityConfigurations in the indexer.
func (s *communityConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.CommunityConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CommunityConfiguration))
	})
	return ret, err
}

// CommunityConfigurations returns an object that can list and get CommunityConfigurations.
func (s *communityConfigurationLister) CommunityConfigurations(namespace string) CommunityConfigurationNamespaceLister {
	return communityConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CommunityConfigurationNamespaceLister helps list and get CommunityConfigurations.
// All objects returned here must be treated as read-only.
type CommunityConfigurationNamespaceLister interface {
	// List lists all CommunityConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CommunityConfiguration, err error)
	// Get retrieves the CommunityConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CommunityConfiguration, error)
	CommunityConfigurationNamespaceListerExpansion
}

// communityConfigurationNamespaceLister implements the CommunityConfigurationNamespaceLister
// interface.
type communityConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CommunityConfigurations in the indexer for a given namespace.
func (s communityConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CommunityConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CommunityConfiguration))
	})
	return ret, err
}

// Get retrieves the CommunityConfiguration from the indexer for a given namespace and name.
func (s communityConfigurationNamespaceLister) Get(name string) (*v1alpha1.CommunityConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("communityconfiguration"), name)
	}
	return obj.(*v1alpha1.CommunityConfiguration), nil
}
